// Code generated by MockGen. DO NOT EDIT.
// Source: C:/other/go-mock-test/internal/handler/handler.go

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockParentHandler is a mock of ParentHandler interface.
type MockParentHandler struct {
	ctrl     *gomock.Controller
	recorder *MockParentHandlerMockRecorder
}

// MockParentHandlerMockRecorder is the mock recorder for MockParentHandler.
type MockParentHandlerMockRecorder struct {
	mock *MockParentHandler
}

// NewMockParentHandler creates a new mock instance.
func NewMockParentHandler(ctrl *gomock.Controller) *MockParentHandler {
	mock := &MockParentHandler{ctrl: ctrl}
	mock.recorder = &MockParentHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParentHandler) EXPECT() *MockParentHandlerMockRecorder {
	return m.recorder
}

// Parent mocks base method.
func (m *MockParentHandler) Parent(ctx context.Context, req string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parent", ctx, req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parent indicates an expected call of Parent.
func (mr *MockParentHandlerMockRecorder) Parent(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parent", reflect.TypeOf((*MockParentHandler)(nil).Parent), ctx, req)
}
